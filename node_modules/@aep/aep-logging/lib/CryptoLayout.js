"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CryptoLayout = void 0;
const crypto = __importStar(require("crypto"));
const node_rsa_1 = __importDefault(require("node-rsa"));
const fs = __importStar(require("fs"));
const util_1 = __importDefault(require("util"));
const dateFormat = require('date-format');
const styles = {
    // styles
    bold: [1, 22],
    italic: [3, 23],
    underline: [4, 24],
    inverse: [7, 27],
    // grayscale
    white: [37, 39],
    grey: [90, 39],
    black: [90, 39],
    // colors
    blue: [34, 39],
    cyan: [36, 39],
    green: [32, 39],
    magenta: [35, 39],
    red: [91, 39],
    yellow: [33, 39]
};
/**
 * log4js加密Layout
 */
class CryptoLayout {
    /**
     * 秘钥路径
     * @param keyPath
     */
    constructor(keyPath) {
        const keyData = fs.readFileSync(keyPath, 'utf8');
        const option = { encryptionScheme: 'pkcs1' };
        CryptoLayout.publicKey = new node_rsa_1.default(keyData, undefined, option);
    }
    static colorizeStart(style) {
        return style ? `\x1B[${styles[style][0]}m` : '';
    }
    static colorizeEnd(style) {
        return style ? `\x1B[${styles[style][1]}m` : '';
    }
    static colorize(str, style) {
        return CryptoLayout.colorizeStart(style) + str + CryptoLayout.colorizeEnd(style);
    }
    static timestampLevelAndCategory(loggingEvent, colour) {
        return CryptoLayout.colorize(util_1.default.format('[%s] [%s] %s - ', dateFormat.asString(loggingEvent.startTime), loggingEvent.level.toString(), loggingEvent.categoryName), colour || "blue");
    }
    /**
     *  加密layout
     * @param loggingEvent
     * @returns
     */
    encryptLayout(loggingEvent) {
        const key = crypto.randomBytes(16).toString('hex');
        const encrypedPlain = CryptoLayout.aesEncrypt(key, ...loggingEvent.data);
        const encrypednKey = CryptoLayout.rsaEncrypt(key);
        return CryptoLayout.timestampLevelAndCategory(loggingEvent) + '%aeshead' + encrypednKey + '%aesfoot' + util_1.default.format(encrypedPlain);
    }
    /**
     * rsa加密
     * @param plain
     * @returns
     */
    static rsaEncrypt(plain) {
        return CryptoLayout.publicKey.encrypt(plain, 'base64');
    }
    /**
     * aes加密
     * @param key
     * @param data
     * @returns
     */
    static aesEncrypt(key, ...data) {
        // eslint-disable-next-line node/no-deprecated-api
        // function createCipher(algorithm: string, password: BinaryLike, options?: stream.TransformOptions): Cipher;
        //const cipher = crypto.createCipher('aes-128-ecb', key);
        // type CipherCCMTypes = 'aes-128-ccm' | 'aes-192-ccm' | 'aes-256-ccm';
        const cipher = crypto.createCipheriv('aes-128-ecb', Buffer.from(key, 'hex'), Buffer.alloc(0));
        const utf8Encoding = "utf8";
        const hexEncoding = "hex";
        const dataStr = data.join("");
        let encrupted = cipher.update(dataStr, utf8Encoding, hexEncoding);
        encrupted += cipher.final('hex');
        return encrupted;
    }
}
exports.CryptoLayout = CryptoLayout;
CryptoLayout.publicKey = null;
//# sourceMappingURL=CryptoLayout.js.map