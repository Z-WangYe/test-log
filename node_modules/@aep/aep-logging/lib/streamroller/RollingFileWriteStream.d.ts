/// <reference types="node" />
export = RollingFileWriteStream;
declare const RollingFileWriteStream_base: typeof import("stream").Writable;
/**
 * RollingFileWriteStream is mainly used when writing to a file rolling by date or size.
 * RollingFileWriteStream inherits from stream.Writable
 */
declare class RollingFileWriteStream extends RollingFileWriteStream_base {
    /**
     * Create a RollingFileWriteStream
     * @constructor
     * @param {string} filePath - The file path to write.
     * @param {object} options - The extra options
     * @param {number} options.numToKeep - The max numbers of files to keep.
     * @param {number} options.maxSize - The maxSize one file can reach. Unit is Byte.
     *                                   This should be more than 1024. The default is Number.MAX_SAFE_INTEGER.
     * @param {string} options.mode - The mode of the files. The default is '0644'. Refer to stream.writable for more.
     * @param {string} options.flags - The default is 'a'. Refer to stream.flags for more.
     * @param {boolean} options.compress - Whether to compress backup files.
     * @param {boolean} options.keepFileExt - Whether to keep the file extension.
     * @param {string} options.pattern - The date string pattern in the file name.
     * @param {boolean} options.alwaysIncludePattern - Whether to add date to the name of the first file.
     */
    constructor(filePath: string, options: {
        numToKeep: number;
        maxSize: number;
        mode: string;
        flags: string;
        compress: boolean;
        keepFileExt: boolean;
        pattern: string;
        alwaysIncludePattern: boolean;
    });
    options: any;
    fileObject: any;
    fileFormatter: any;
    fileNameParser: (filename: any) => {
        filename: any;
        index: number;
        isCompressed: boolean;
    };
    state: {
        currentSize: number;
    };
    filename: any;
    _setExistingSizeAndDate(): void;
    _parseOption(rawOptions: any): any;
    _shouldRoll(): Promise<void>;
    _dateChanged(): boolean;
    _tooBig(): boolean;
    _roll(): Promise<any>;
    _moveOldFiles(): Promise<void>;
    _getExistingFiles(): Promise<any>;
    _getExistingDirs(): Promise<any[]>;
    _renewWriteStream(): void;
    currentFileStream: import("fs").WriteStream;
    _clean(): Promise<void>;
    _tooManyFiles(numFiles: any): boolean;
    _tooManyDirs(numFiles: any): boolean;
}
